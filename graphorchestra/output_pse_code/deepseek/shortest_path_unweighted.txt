from collections import deque

def shortest_path_unweighted(G, u, v):
    if u == v:
        return 0
    Q = deque([(u, [u], 0)])
    visited = set()
    while Q:
        node, path, distance = Q.popleft()
        if node == v:
            return distance
        visited.add(node)
        for neighbor in G[node]:
            if neighbor not in visited:
                Q.append((neighbor, path + [neighbor], distance + 1))
    return None
